{
  "name": "Enamel",
  "tagline": "Helps C development with Clay config framework",
  "body": "# Enamel [![Build Status](https://travis-ci.org/gregoiresage/enamel.svg?branch=master)](https://travis-ci.org/gregoiresage/enamel)&nbsp;[![MIT License](http://img.shields.io/badge/license-MIT-lightgray.svg)](./LICENSE)\r\n\r\nEnamel is a python script that generates C helpers from a [Clay](https://github.com/pebble/clay) configuration file to easily get the value of your settings.\r\n\r\nEnamel will :\r\n* handle AppMessages automatically (app_message_open, handler registration, ...)\r\n* save/load the value of the settings in the persistant storage automatically\r\n* provide a getter for each of your settings\r\n\r\nYou can focus on your watchapp/face, Enamel will do the rest !\r\n\r\n---\r\n\r\n# Getting Started (SDK 3.13+)\r\n1. You project must contain a valid configuration file in `src/js/config.json` (see https://github.com/pebble/clay)\r\n2. Install enamel with `pebble package install enamel`\r\n3. Copy and paste the following line into the top of your `wscript` : \r\n  \r\n  ``` python\r\n  import sys\r\n  sys.path.append('node_modules')\r\n  from enamel.enamel import enamel\r\n  ```\r\n4. Change the `build` of your wscript from \r\n\r\n  ``` python\r\n  ctx.pbl_program(source=ctx.path.ant_glob('src/**/*.c'), target=app_elf)\r\n  ```\r\n  to\r\n  ``` python\r\n  ctx(rule = enamel, source='src/js/config.json', target=['enamel.c', 'enamel.h'])\r\n  ctx.pbl_program(source=ctx.path.ant_glob('src/**/*.c') + ['enamel.c'], target=app_elf)\r\n  ```\r\n5. Launch your Pebble build : 2 files (enamel.c and enamel.h) should be generated in `build` and compiled\r\n\r\n>:warning:<br>\r\n>The first time you launch a build, you will get an error message because Jinja2 module is missing.<br>\r\n>Just follow the instructions to fix your environment.\r\n\r\n# Getting Started (CloudPebble)\r\nIn the CloudPebble environment, you can't modify the wscript so you need to call directly the python script.\r\n\r\n1. Under Dependencies in the project navigation, enter `enamel` as the Package Name and ^1.0.0 for the Version. You may use any specific version you like, however using ^1.0.0 will ensure you receive all minor version updates.\r\n\r\n2. Copy the content of your Clay's `config.js` file into a local file (`local_config.js`)\r\n\r\n3. Install the python dependencies for the code generation\r\n\r\n  ```\r\n  pip install -r requirements.txt\r\n  ```\r\n\r\n4. Call the script to generate the enamel files\r\n\r\n  ```\r\n  python enamel.py --config /path/to/local_config.js \r\n  ```\r\n\r\n5. Copy the 2 generated files in your CloudPebble project\r\n\r\n---\r\n\r\n# Using Enamel\r\n1. Setup your project correctly for Clay : https://github.com/pebble/clay\r\n2. Include `enamel.h` in your c file : \r\n  \r\n  ``` c\r\n  #include \"enamel.h\"\r\n  #include <pebble-events/pebble-events.h>\r\n  ```\r\n3. Initialize enamel in your `init` function and call `events_app_message_open()` after any other libraries you need to init.\r\n  \r\n  ``` c\r\n  static void init(void) {\r\n    // Initialize Enamel to register App Message handlers and restores settings\r\n    enamel_init();\r\n    \r\n    // call pebble-events app_message_open function\r\n    events_app_message_open(); \r\n    \r\n    ...\r\n  }\r\n  ```\r\n4. Deinitialize enamel in your `deinit` function :\r\n  \r\n  ``` c\r\n  static void deinit(void) {\r\n    ...\r\n  \r\n    // Deinit Enamel to unregister App Message handlers and save settings\r\n    enamel_deinit();\r\n  }\r\n  ```\r\n5. (Optional) Register a callback after `enamel_init` that will be automatically called when the settings are received.\r\n\r\n  ``` c\r\n  static void enamel_register_settings_received_cb(){\r\n    APP_LOG(0, \"Settings received %d\", enamel_get_myinteger());\r\n    window_set_background_color(window, enamel_get_background());\r\n    // do what you want here \r\n    // you will probably udpate your textlayers, colors, ... with the new settings\r\n    // and mark your layers dirty\r\n  }\r\n  \r\n  ...\r\n  \r\n  static void init(void) {\r\n    // Initialize Enamel to register App Message handlers and restores settings\r\n    enamel_init();\r\n\r\n    // Register our callback\r\n    enamel_register_settings_received(enamel_register_settings_received_cb);\r\n    \r\n    // call pebble-events app_message_open function\r\n    events_app_message_open(); \r\n    \r\n    ...\r\n  }\r\n  ```\r\n6. Get the value of your setting with :\r\n  \r\n  ``` c\r\n  enamel_get_Mysetting(); // where 'Mysetting' is a messageKey in your configuration file\r\n  ```\r\n---\r\n\r\n# Enamel API\r\n\r\n## Methods\r\n\r\n| Method | Description |\r\n|--------|---------|\r\n| `void enamel_init()` | Initialize Enamel and read settings from persistant storage |\r\n| `void enamel_deinit()` | Deinitialize Enamel and save the settings in the persistant storage |\r\n| `<type> enamel_get_<messageKeyId>()` | Return the value for the setting `messageKeyId` |\r\n| `bool enamel_get_<messageKeyId>(uint16_t index_)` | *Only relevant for `checkboxgroup`*. <br>Return the value at given index for the setting `messageKeyId` |\r\n\r\n## Type mapping\r\n\r\n| Clay Type | Type returned by the getter |\r\n|--------|---------|\r\n| `input` | `char*` |\r\n| `toggle` | `bool` |\r\n| `color` | `GColor` |\r\n| `select/radiogroup` | `char*` or `enum` |\r\n| `checkboxgroup` | `bool` |\r\n| `slider` | `int32_t` |\r\n\r\n### Special case for `select`, `radiogroup`\r\n\r\nIf the value of the options are `string` in the `config.json`, Enamel will generate a `char*` getter\r\n\r\nIf the value of the options are `integer`, Enamel will generate an `enum` mapping all the possible values for this setting and the getter will return this `enum`\r\n\r\nFor the given setting :\r\n``` json\r\n{\r\n  \"type\": \"radiogroup\",\r\n  \"messageKey\": \"favorite_food\",\r\n  \"label\": \"Favorite Food\",\r\n  \"defaultValue\": \"1\",\r\n  \"options\": [\r\n    { \r\n      \"label\": \"Sushi\", \r\n      \"value\": 0 \r\n    },\r\n    { \r\n      \"label\": \"Pizza\", \r\n      \"value\": 1 \r\n    },\r\n    { \r\n      \"label\": \"Burgers\", \r\n      \"value\": 2 \r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nEnamel will generate\r\n\r\n``` c\r\ntypedef enum {\r\n\tFAVORITE_FOOD_SUSHI = 0,\r\n\tFAVORITE_FOOD_PIZZA = 1,\r\n\tFAVORITE_FOOD_BURGER = 2,\r\n} FAVORITE_FOODValue;\r\nFAVORITE_FOODValue enamel_get_favorite_food();\r\n```\r\n\r\nYou can then easily code switch case for this setting\r\n``` c\r\nswitch(enamel_get_favorite_food()){\r\n case FAVORITE_FOOD_SUSHI : break; //do something\r\n case FAVORITE_FOOD_PIZZA : break; //do something\r\n case FAVORITE_FOOD_BURGER : break; //do something\r\n}\r\n```\r\n\r\n### Special case for `slider`\r\n\r\nEnamel will also generate a constant for your slider containing the 'precision' of your slider, e.g.\r\n```\r\n#define MY_SLIDER_PRECISION 100\r\n```\r\n",
  "google": "UA-44039387-7",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}